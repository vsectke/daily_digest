import os
import feedparser
import requests
from datetime import datetime
import smtplib
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart

try:
    from newspaper import Article
    NEWSPAPER_AVAILABLE = True
except ImportError as e:
    print(f"‚ö†Ô∏è Kh√¥ng th·ªÉ import newspaper: {e}")
    NEWSPAPER_AVAILABLE = False

# Danh s√°ch RSS c·∫ßn theo d√µi
RSS_FEEDS = {
    "PCCC": [
        "https://baochinhphu.vn/rss/thoi-su.rss",
        "https://cand.com.vn/rss"
    ],
    "LNG": [
        "https://vnexpress.net/rss/kinh-doanh.rss",
        "https://nangluongquocte.petrotimes.vn/rss"
    ],
    "MRT": [
        "https://tuoitre.vn/rss/thoi-su.rss",
        "https://vnexpress.net/rss/thoi-su.rss"
    ]
}

# H√†m l·∫•y n·ªôi dung b√†i b√°o
def fetch_article_content(url):
    if not NEWSPAPER_AVAILABLE:
        return ""
    
    try:
        article = Article(url)
        article.download()
        article.parse()
        return article.text[:4000]  # Gi·ªõi h·∫°n ƒë·ªô d√†i
    except Exception as e:
        print(f"‚ö†Ô∏è L·ªói khi l·∫•y n·ªôi dung t·ª´ {url}: {e}")
        return ""

# H√†m l·∫•y m√¥ t·∫£ t·ª´ RSS feed
def get_description_from_feed(entry):
    """L·∫•y m√¥ t·∫£ t·ª´ RSS entry n·∫øu kh√¥ng th·ªÉ l·∫•y full content"""
    description = ""
    if hasattr(entry, 'description'):
        description = entry.description
    elif hasattr(entry, 'summary'):
        description = entry.summary
    return description[:1000] if description else ""

# H√†m t√≥m t·∫Øt b·∫±ng DeepSeek
def summarize_with_deepseek(text):
    api_key = os.getenv("DEEPSEEK_API_KEY")
    if not api_key:
        return "‚ö†Ô∏è Thi·∫øu DEEPSEEK_API_KEY"
    
    if not text.strip():
        return "‚ö†Ô∏è Kh√¥ng c√≥ n·ªôi dung ƒë·ªÉ t√≥m t·∫Øt"

    try:
        resp = requests.post(
            "https://api.deepseek.com/v1/chat/completions",
            headers={"Authorization": f"Bearer {api_key}"},
            json={
                "model": "deepseek-chat",
                "messages": [
                    {"role": "system", "content": "B·∫°n l√† chuy√™n gia PCCC, nƒÉng l∆∞·ª£ng, h·∫° t·∫ßng giao th√¥ng. H√£y t√≥m t·∫Øt ng·∫Øn g·ªçn tin t·ª©c cho b·∫£n tin n·ªôi b·ªô b·∫±ng ti·∫øng Vi·ªát."},
                    {"role": "user", "content": f"T√≥m t·∫Øt tin t·ª©c n√†y:\n{text}"}
                ],
                "temperature": 0.3,
                "max_tokens": 200
            },
            timeout=30
        )
        resp.raise_for_status()
        return resp.json()["choices"][0]["message"]["content"].strip()
    except requests.exceptions.Timeout:
        return "‚ö†Ô∏è Timeout khi g·ªçi DeepSeek API"
    except requests.exceptions.RequestException as e:
        return f"‚ö†Ô∏è L·ªói khi g·ªçi DeepSeek: {e}"
    except Exception as e:
        return f"‚ö†Ô∏è L·ªói kh√¥ng x√°c ƒë·ªãnh: {e}"

# H√†m qu√©t tin & t√≥m t·∫Øt
def collect_news():
    summaries = {}
    total_processed = 0
    
    for topic, feeds in RSS_FEEDS.items():
        summaries[topic] = []
        print(f"üì∞ ƒêang x·ª≠ l√Ω ch·ªß ƒë·ªÅ: {topic}")
        
        for feed_url in feeds:
            try:
                print(f"  üîç ƒêang qu√©t: {feed_url}")
                feed = feedparser.parse(feed_url)
                
                if not feed.entries:
                    print(f"  ‚ö†Ô∏è Kh√¥ng c√≥ tin t·ª©c t·ª´ {feed_url}")
                    continue
                
                for entry in feed.entries[:3]:  # l·∫•y 3 tin ƒë·∫ßu
                    # Th·ª≠ l·∫•y full content tr∆∞·ªõc
                    content = fetch_article_content(entry.link)
                    
                    # N·∫øu kh√¥ng l·∫•y ƒë∆∞·ª£c full content, d√πng description t·ª´ RSS
                    if not content:
                        content = get_description_from_feed(entry)
                    
                    if not content:
                        print(f"  ‚ö†Ô∏è Kh√¥ng th·ªÉ l·∫•y n·ªôi dung: {entry.title}")
                        continue
                    
                    summary = summarize_with_deepseek(content)
                    summaries[topic].append({
                        "title": entry.title,
                        "link": entry.link,
                        "summary": summary
                    })
                    total_processed += 1
                    print(f"  ‚úÖ ƒê√£ x·ª≠ l√Ω: {entry.title[:50]}...")
                    
            except Exception as e:
                print(f"  ‚ùå L·ªói khi x·ª≠ l√Ω feed {feed_url}: {e}")
                continue
    
    print(f"üìä T·ªïng s·ªë tin ƒë√£ x·ª≠ l√Ω: {total_processed}")
    return summaries

# H√†m g·ª≠i email
def send_email(summaries):
    # Ki·ªÉm tra bi·∫øn m√¥i tr∆∞·ªùng
    required_vars = ["SMTP_USER", "SMTP_PASS", "EMAIL_TO"]
    missing_vars = [var for var in required_vars if not os.getenv(var)]
    
    if missing_vars:
        print(f"‚ùå Thi·∫øu bi·∫øn m√¥i tr∆∞·ªùng: {', '.join(missing_vars)}")
        return False

    smtp_host = os.getenv("SMTP_HOST", "smtp.gmail.com")
    smtp_port = int(os.getenv("SMTP_PORT", "587"))
    smtp_user = os.getenv("SMTP_USER")
    smtp_pass = os.getenv("SMTP_PASS")
    email_to = os.getenv("EMAIL_TO")

    # T·∫°o email
    today = datetime.now().strftime("%Y-%m-%d")
    subject = f"[B·∫¢N TIN] PCCC ¬∑ LNG ¬∑ MRT ‚Äî {today}"
    
    # ƒê·∫øm t·ªïng s·ªë tin
    total_articles = sum(len(items) for items in summaries.values())
    
    body = f"üì∞ B·∫£n tin t·ª± ƒë·ªông ng√†y {today}\n"
    body += f"üìä T·ªïng s·ªë: {total_articles} tin t·ª©c\n"
    body += "=" * 50 + "\n\n"

    for topic, items in summaries.items():
        if not items:
            continue
            
        body += f"\nüè∑Ô∏è === {topic} === ({len(items)} tin)\n\n"
        for i, item in enumerate(items, 1):
            body += f"{i}. {item['title']}\n"
            body += f"üîó {item['link']}\n"
            body += f"üìù T√≥m t·∫Øt: {item['summary']}\n"
            body += "-" * 30 + "\n\n"

    body += f"\nü§ñ ƒê∆∞·ª£c t·∫°o t·ª± ƒë·ªông b·ªüi Daily Digest\n"
    body += f"‚è∞ Th·ªùi gian: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"

    msg = MIMEMultipart()
    msg["From"] = smtp_user
    msg["To"] = email_to
    msg["Subject"] = subject
    msg.attach(MIMEText(body, "plain", "utf-8"))

    try:
        with smtplib.SMTP(smtp_host, smtp_port) as server:
            server.starttls()
            server.login(smtp_user, smtp_pass)
            server.send_message(msg)
        print("‚úÖ ƒê√£ g·ª≠i email th√†nh c√¥ng!")
        return True
    except Exception as e:
        print(f"‚ùå L·ªói g·ª≠i email: {e}")
        return False

if __name__ == "__main__":
    print("üöÄ B·∫Øt ƒë·∫ßu thu th·∫≠p tin t·ª©c...")
    
    # Ki·ªÉm tra c√°c dependency quan tr·ªçng
    if not NEWSPAPER_AVAILABLE:
        print("‚ö†Ô∏è Newspaper3k kh√¥ng kh·∫£ d·ª•ng, ch·ªâ s·ª≠ d·ª•ng RSS descriptions")
    
    try:
        news = collect_news()
        
        # Ki·ªÉm tra xem c√≥ tin t·ª©c n√†o kh√¥ng
        total_news = sum(len(items) for items in news.values())
        if total_news == 0:
            print("‚ö†Ô∏è Kh√¥ng thu th·∫≠p ƒë∆∞·ª£c tin t·ª©c n√†o!")
        else:
            print(f"üìß ƒêang g·ª≠i email v·ªõi {total_news} tin t·ª©c...")
            success = send_email(news)
            if success:
                print("üéâ Ho√†n th√†nh!")
            else:
                print("‚ùå Th·∫•t b·∫°i khi g·ª≠i email!")
                
    except Exception as e:
        print(f"üí• L·ªói ch√≠nh: {e}")
        raise
